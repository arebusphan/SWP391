// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250711055851_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.Banners", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("DAL.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("DAL.Models.Classes", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DAL.Models.ConsultationAppointments", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConsultationAppointments");
                });

            modelBuilder.Entity("DAL.Models.HealthChecks", b =>
                {
                    b.Property<int>("CheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CheckId"));

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("HeightCm")
                        .HasColumnType("double precision");

                    b.Property<string>("LeftEarHearing")
                        .HasColumnType("text");

                    b.Property<double?>("LeftEyeVision")
                        .HasColumnType("double precision");

                    b.Property<string>("OralHealth")
                        .HasColumnType("text");

                    b.Property<string>("OtherNotes")
                        .HasColumnType("text");

                    b.Property<int>("RecordedBy")
                        .HasColumnType("integer");

                    b.Property<string>("RightEarHearing")
                        .HasColumnType("text");

                    b.Property<double?>("RightEyeVision")
                        .HasColumnType("double precision");

                    b.Property<string>("SkinStatus")
                        .HasColumnType("text");

                    b.Property<string>("SpineStatus")
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<double?>("WeightKg")
                        .HasColumnType("double precision");

                    b.HasKey("CheckId");

                    b.HasIndex("RecordedBy");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthChecks");
                });

            modelBuilder.Entity("DAL.Models.HealthProfile", b =>
                {
                    b.Property<int>("DeclarationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeclarationId"));

                    b.Property<string>("Allergies")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ChronicDiseases")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Hearing")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OtherNotes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Vision")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("DeclarationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("HealthProfiles");
                });

            modelBuilder.Entity("DAL.Models.IncidentSupplies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IncidentId")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("integer");

                    b.Property<int>("SupplyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("SupplyId");

                    b.ToTable("IncidentSupplies");
                });

            modelBuilder.Entity("DAL.Models.MedicalIncidents", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IncidentId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HandledBy")
                        .HasColumnType("text");

                    b.Property<string>("IncidentName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("IncidentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicalIncidents");
                });

            modelBuilder.Entity("DAL.Models.MedicalSupplies", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplyId"));

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SupplyName")
                        .HasColumnType("text");

                    b.HasKey("SupplyId");

                    b.ToTable("medicalSupplies");
                });

            modelBuilder.Entity("DAL.Models.MedicationIntakeLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("GivenBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("IntakeTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("LogId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicationIntakeLogs");
                });

            modelBuilder.Entity("DAL.Models.MedicationRequests", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RejectReason")
                        .HasColumnType("text");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("RequestId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicationRequests");
                });

            modelBuilder.Entity("DAL.Models.Otps", b =>
                {
                    b.Property<int>("OtpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OtpId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("OtpId");

                    b.HasIndex("UserId");

                    b.ToTable("Otps");
                });

            modelBuilder.Entity("DAL.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DAL.Models.Students", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GuardianId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("GuardianId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("HealthEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Execution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplyId")
                        .HasColumnType("integer");

                    b.HasKey("EventId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SupplyId");

                    b.ToTable("HealthEvents");
                });

            modelBuilder.Entity("HealthEventSupply", b =>
                {
                    b.Property<int>("EventSupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventSupplyId"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("EventId");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("integer");

                    b.Property<int>("SupplyId")
                        .HasColumnType("integer");

                    b.HasKey("EventSupplyId");

                    b.HasIndex("EventId");

                    b.HasIndex("SupplyId");

                    b.ToTable("HealthEventSupplies");
                });

            modelBuilder.Entity("HealthNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventImage")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NotificationId");

                    b.ToTable("HealthNotifications");
                });

            modelBuilder.Entity("MedicalSupply", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupplyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SupplyId");

                    b.ToTable("MedicalSupplies");
                });

            modelBuilder.Entity("NotificationClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationClasses");
                });

            modelBuilder.Entity("NotificationStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmStatus")
                        .HasColumnType("text");

                    b.Property<string>("DeclineReason")
                        .HasColumnType("text");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<string>("ParentPhone")
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("StudentId");

                    b.ToTable("NotificationStudents");
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VaccinationResults", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResultId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<string>("ObservationStatus")
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Vaccinated")
                        .HasColumnType("boolean");

                    b.Property<string>("VaccinatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("VaccinatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ResultId");

                    b.HasIndex("StudentId");

                    b.ToTable("VaccinationResults");
                });

            modelBuilder.Entity("DAL.Models.ConsultationAppointments", b =>
                {
                    b.HasOne("DAL.Models.Students", "Student")
                        .WithMany("ConsultationAppointments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Models.HealthChecks", b =>
                {
                    b.HasOne("Users", "Recorder")
                        .WithMany()
                        .HasForeignKey("RecordedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Students", "Student")
                        .WithMany("HealthChecks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recorder");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Models.HealthProfile", b =>
                {
                    b.HasOne("Users", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users", "ReviewedByUser")
                        .WithMany()
                        .HasForeignKey("ReviewedBy");

                    b.HasOne("DAL.Models.Students", "Students")
                        .WithOne("HealthProfile")
                        .HasForeignKey("DAL.Models.HealthProfile", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ReviewedByUser");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("DAL.Models.IncidentSupplies", b =>
                {
                    b.HasOne("DAL.Models.MedicalIncidents", "Incident")
                        .WithMany("IncidentSupplies")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.MedicalSupplies", "Supply")
                        .WithMany("IncidentSupplies")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("DAL.Models.MedicalIncidents", b =>
                {
                    b.HasOne("DAL.Models.Classes", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("DAL.Models.Students", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Models.MedicationIntakeLog", b =>
                {
                    b.HasOne("DAL.Models.MedicationRequests", "MedicationRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Students", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicationRequest");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Models.MedicationRequests", b =>
                {
                    b.HasOne("Users", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users", "ReviewedByUser")
                        .WithMany()
                        .HasForeignKey("ReviewedBy");

                    b.HasOne("DAL.Models.Students", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ReviewedByUser");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Models.Otps", b =>
                {
                    b.HasOne("Users", "User")
                        .WithMany("Otps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Students", b =>
                {
                    b.HasOne("DAL.Models.Classes", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users", "Guardian")
                        .WithMany("Students")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Guardian");
                });

            modelBuilder.Entity("HealthEvent", b =>
                {
                    b.HasOne("DAL.Models.Students", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSupply", "Supply")
                        .WithMany()
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("HealthEventSupply", b =>
                {
                    b.HasOne("HealthEvent", "HealthEvent")
                        .WithMany("Supplies")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSupply", "Supply")
                        .WithMany()
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthEvent");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("NotificationClass", b =>
                {
                    b.HasOne("DAL.Models.Classes", "Class")
                        .WithMany("NotificationClasses")
                        .HasForeignKey("ClassId");

                    b.HasOne("HealthNotification", "Notification")
                        .WithMany("NotificationClasses")
                        .HasForeignKey("NotificationId");

                    b.Navigation("Class");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("NotificationStudent", b =>
                {
                    b.HasOne("HealthNotification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Students", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.HasOne("DAL.Models.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("VaccinationResults", b =>
                {
                    b.HasOne("DAL.Models.Students", "Student")
                        .WithMany("VaccinationResults")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Models.Classes", b =>
                {
                    b.Navigation("NotificationClasses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("DAL.Models.MedicalIncidents", b =>
                {
                    b.Navigation("IncidentSupplies");
                });

            modelBuilder.Entity("DAL.Models.MedicalSupplies", b =>
                {
                    b.Navigation("IncidentSupplies");
                });

            modelBuilder.Entity("DAL.Models.Students", b =>
                {
                    b.Navigation("ConsultationAppointments");

                    b.Navigation("HealthChecks");

                    b.Navigation("HealthProfile");

                    b.Navigation("VaccinationResults");
                });

            modelBuilder.Entity("HealthEvent", b =>
                {
                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("HealthNotification", b =>
                {
                    b.Navigation("NotificationClasses");
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.Navigation("Otps");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
